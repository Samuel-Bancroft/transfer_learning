Update 0.3                    ____Documentation for Django_WebApp


Chapters:
    1............................................ How to use this documentation
    1.1.......................................... Updating documentation
    2............................................ Running Project
    2.1.......................................... Running Webpage
    2.2.......................................... Using Shell to test the code
    3............................................ Updating HTML/CSS
    3.1.......................................... Editing CSS


1: How to use this documentation
    This documentation is layed out with chapter numbers which are all indexed chapters.
    1.1: Updating documentation
        When updating this documentation please make a commit it to github on its own, as in no other changes to any other
        if there is something your looking for
        but cant find it please reach out to me (Samuel) to add the relavent information, or if you know about it already
2: Running Project
    To run the project you need to have got the latest version from the git repo.
    open command prompt, then direct to where the folder is saved, for example for me it will be
        'Documents\Django_transfer_learning' do i would do 'cd Documents\Django_transfer_learning',
    after you press enter if it worked correctly you should be in the folder.
    'cd' means change directory, and if you want to see whast in the directory you are in at the moment, just enter 'dir'
    and press enter, it will list all the filed of the directory you are in right now.
    Next we need to run the venv enviroment, to do this we put this
        'Scripts\activate.bat'
    When you press enter you will see (Django_transfer_learning) at the start, so somethign like this
        '(Django_transfer_learning) C:\Users\samue\Documents\Django_transfer_learning>'
    This means your in the right place (the virtual enviroment 'venv').
    2.1: Running Webpage
        To run the web page you need the venv active, for exmaple in cmd it needs to look like this
            '(Django_transfer_learning) C:\Users\samue\Documents\Django_transfer_learning
            is case 'transfer_learning', so in cmd type
            'cd transfer_learning'
        Now all we need to do is run the command 'py manage.py runserver' and then the webpage is active.
        to see the front end enter this IP into a web browser 127.0.0.1:8000
        After you load the webpage congrats you have ran the project and can see the output
    2.2: Using Shell to test the code
        For testing the code in cmd/shell all we need to do is run this code 'py manage.py shell', these needs to be ran
        from this location '(Django_transfer_learning) C:\Users\samue\Documents\Django_transfer_learning\transfer_learning>' so in
        the virtual enviroment the (Django_WebApp_VENV) and in the transfer_learning folder.
        When you run this code it will open the python interpreter in shell which is a good way to debug code, for exmaple
        it will say (InteractiveConsole) when your in shell.
        From here we know we have a class called 'Member', so im going to get all members and all the values for the members
        by using this code 'members = Member.objects.all().values()' but dont for get to import the models with
        'from members.models import Member'.
        the result of this code is
        <QuerySet [{'id': 1, 'firstname': 'Samuel', 'lastname': 'Bancroft', 'email': 'sbancroft@gmail.com',
            'joined_date': None}, {'id': 2, 'firstname': 'Tobias', 'lastname': 'Refsnes', 'email': '', 'joined_date': None},
            {'id': 3, 'firstname': 'Linus', 'lastname': 'Refsnes', 'email': '', 'joined_date': None}, {'id': 4,
            'firstname': 'Lene', 'lastname': 'Refsnes', 'email': '', 'joined_date': None}, {'id': 5, 'firstname': 'Stalikken',
             'lastname': 'Refsnes', 'email': '', 'joined_date': None}, {'id': 6, 'firstname': 'Jane', 'lastname': 'Doe',
              'email': '', 'joined_date': None}]>
        As you can see in shell we can access all the data for all members, but we can take this further with filters
        for example say you only want to show members with 'sam' in their name we would do this
        'members = Member.objects.filter(firstname__icontains='sam').values()'
        As you can see this is using a filter, think of it as your filtering through all the data in the database to do with
        members and you only want to see members of specific conditions.
3: Updating HTML/CSS
    3.1: Editing CSS
        When updating its not just as simple as updating the CSS on a HTML page and it working, there are a few tweeks that need to happen
        after you edit the file.
        In this example i have added <h1>testing 2</h1> to the testing.html page, and then when i run the page its there, but
        lets add some CSS to this for example im going to put <h1 class="h1_test'">testing 2</h1>, then in the master.css im going to
        put h1.h1_test {position: absolute;left: 100px;}, this will just move the words across the screen, but when i refresh the
        page nothign changes, this is where we need to use collectstatic function, for example we will run py manage.py collectstatic
        from this location (Django_transfer_learning) C:\Users\samue\Documents\Django_transfer_learning\transfer_learning>, make note of knowing
        what directory you are in. After running this it will ask you yes or no to continue with the changes, put yes, now once
        this is done all you need to do is refresh the page and it will now be updated, but this would be a permanent change,
        well untill you redo it to undo it, but to test some CSS code all we need to do it somethign called inline-CSS for example
         <h1 style="position: absolute; left:100px; color:white;">testing 2</h1>
        See open < then the type of tag, so in this case h1 (header 1 size, can also do h2, h3 or h4 and so on),
        after h1 instead of closing with >, i entered the style tag which is where you put the css for each, this can be done
        for div's, tables, lists and so on. The reason to do a inline-CSS or updating it in to the production files with
        collectstatic really depends on its importance i guess.
4: Migrations: ####### Needs updating
    if you update models, forms, css, and a few others you nee dto run this
    from the transfer learning DIR
    if you change css
    'py manage.py collectstatic'
    then
    'py manage.py makemigrations'
    then
    'py manage.py migrate'
    then run the server again
    'py manage.py runserver'
    data base name
    TransferModels
    !alissap1992

    create user
    py manage.py createsuperuser


    py -m pip freeze > requirements.txt


